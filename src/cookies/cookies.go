package cookies

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/gorilla/sessions"
	"github.com/nicolas-k-cmd/proj-redes/src/enum"
	"github.com/nicolas-k-cmd/proj-redes/src/env"
	"github.com/nicolas-k-cmd/proj-redes/src/structs"
)

/*
Creates the session cookie (the name is in the env file).
If it fails to get the cookie, it throws an 500.
The cookie options are set that the cookie lasts 7 days and is in SameSitelaxMode.
The cookie is HTTP Only since the frontend can only send it,
not modify or alter it in any matter,
It stores the JWT Token, which is generated by the GenerateJWT Function
*/
func CreateHandler(w http.ResponseWriter, r *http.Request, id int) {
	log.Println("cookie name: ", env.CookieName)
	session, err := env.Store.Get(r, env.CookieName)
	if err != nil {
		log.Println("error gathering session", err)
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(structs.Response{Message: "Ocurrio un error al obtener la sesion"})
		return
	}
	session.Options = &sessions.Options{
		Path:     "/",
		MaxAge:   86400 * 7,
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
	}
	token, err := GenerateJWT(id)
	if err != nil {
		log.Println("error generating new JWT")
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(structs.Response{Message: "Ocurrio un error al generar la sesion"})
		return
	}
	log.Println("JWT Token")
	session.Values["testValue"] = "test"
	session.Values["jwt"] = token
	log.Println("token: ", token)
	log.Println("session", session)
	err = session.Save(r, w)
	if err != nil {
		log.Println("error while storing the session", err.Error())
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(structs.Response{Message: "Ocurrio un error al guardar la sesion"})
		return
	}
}

/*
Deletes the cookie and then redirects to the login webpage
*/
func DeleteHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Se borro la cookie")
	/*
		session, _ := env.Store.Get(r, env.CookieName)
		session.Values["jwt"] = ""
		session.Options.Secure = false
		session.Options.MaxAge = -1
		log.Println("session:", session)
		session.Save(r, w)
	*/
	http.SetCookie(w, &http.Cookie{
		Name:     env.CookieName,
		Value:    "",
		Path:     "/",
		MaxAge:   -1,
		HttpOnly: true,
		Secure:   false,
		SameSite: http.SameSiteLaxMode,
	})
	http.Redirect(w, r, enum.URLs["profile"].Which(r), http.StatusFound)
}

/*
Generates the JWT Token used for cookie session
It lasts 24 hours.
In the registered claims, the subject contains the id of the user.
IssuedAt when it was created.
ExpiresAt when it  expires.
*/
func GenerateJWT(id int) (string, error) {
	//JWT Duration
	now := time.Now()
	expirationTime := now.Add(24 * time.Hour)
	parsedId := strconv.Itoa(id)
	log.Println("PROVIDED ID ", parsedId)
	// Struct Generator
	claims := &env.Claims{
		RegisteredClaims: jwt.RegisteredClaims{
			Issuer:    "scholameds-ketracelblanco",
			Subject:   parsedId,
			IssuedAt:  jwt.NewNumericDate(now),
			ExpiresAt: jwt.NewNumericDate(expirationTime),
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(env.JwtSecret)
	if err != nil {
		return "", err
	}

	return tokenString, nil

}
